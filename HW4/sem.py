"""
Реализовать с использованием функциональной парадигмы процедуру normalization, которая выполняет
нормализацию полученного массива по приведенной формуле нормализованного значения элемента, где
○ x_norm - нормализованное значение элемента
○ x - исходное значение элемента
○ x_max, x_min - максимальное и минимальное значение в массиве
"""
# array = [3, 5, 6, 43, 4, 9, 34, 6, 88, 32, 55]

# def normalization(array):
#     x_max = max(array)
#     x_min = min(array)
#     return list(map(lambda x: round(x, 2),(map(lambda x: ((x - x_min)/(x_max - x_min)), array))))

# print(normalization(array))

"""
Написать скрипт принимающий на вход массив с данными о людях и число - возраст, а возвращающий
число - количество людей старше указанного возраста.
"""

people = [{'name': 'Иван', 'age' : 20}, {'name': 'Павел', 'age' : 31}, {'name': 'Сергей', 'age' : 20}, {'name': 'Александр', 'age' : 38}]

def people_filter(people, age):
    people_f = sum(map(lambda x: x["age"] < age, people))
    return people_f 

age = 30
print(people_filter(people, age))

"""
Реализовать с использованием функциональной парадигмы процедуру для поиска дубликатов. На вход
подается массив, где могут присутствовать дубликаты (а могут и не присутствовать). При применении к
массиву, дубликаты должны быть выведены на экран в виде списка.
"""

num = [3, 5, 3, 6, 43, 4, 4, 9, 34, 6, 88, 32, 55]
print(list(set(filter(lambda x: num.count(x) > 1, num))))